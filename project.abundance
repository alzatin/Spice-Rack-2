{
  "atomType": "Molecule",
  "name": "Spice Rack 2",
  "x": 0,
  "y": 0,
  "uniqueID": "2d23eca4-6125-499d-823f-8c8e7ce3ca2e",
  "ioValues": [],
  "topLevel": true,
  "allAtoms": [
    {
      "atomType": "Output",
      "name": "Output",
      "x": 0.98,
      "y": 0.5,
      "uniqueID": "194c496f-a9cf-4022-9fd2-991adba11348",
      "ioValues": []
    },
    {
      "atomType": "Rotate",
      "name": "Rotate",
      "x": 0.28756476683937826,
      "y": 0.48757763975155277,
      "uniqueID": "35118ee3-e00e-45c2-b82d-9fdc6d5fa4b7",
      "ioValues": [
        {
          "name": "x-axis degrees",
          "ioValue": 90
        },
        {
          "name": "y-axis degrees",
          "ioValue": 0
        },
        {
          "name": "z-axis degrees",
          "ioValue": 0
        }
      ]
    },
    {
      "atomType": "Move",
      "name": "Move",
      "x": 0.420552677029361,
      "y": 0.47204968944099385,
      "uniqueID": "4aa7c59a-ba3e-48d8-b42d-c14f75a88895",
      "ioValues": [
        {
          "name": "xDist",
          "ioValue": 0
        },
        {
          "name": "yDist",
          "ioValue": 100,
          "currentEquation": "100"
        },
        {
          "name": "zDist",
          "ioValue": 75,
          "currentEquation": "75"
        }
      ]
    },
    {
      "atomType": "Difference",
      "name": "Difference",
      "x": 0.5803108808290155,
      "y": 0.3322981366459627,
      "uniqueID": "cf7467a2-a71f-4206-a34f-05588794493d",
      "ioValues": []
    },
    {
      "atomType": "GitHubMolecule",
      "name": "Rounded-rectangle-rep",
      "x": 0.18480138169257343,
      "y": 0.2391304347826087,
      "uniqueID": "7bd41214-231b-4121-81e8-ec318b6815e2",
      "ioValues": [
        {
          "name": "width",
          "ioValue": 250
        },
        {
          "name": "length",
          "ioValue": 100
        },
        {
          "name": "radius",
          "ioValue": 50
        },
        {
          "name": "height",
          "ioValue": 50
        }
      ],
      "topLevel": false,
      "allAtoms": [
        {
          "atomType": "Output",
          "name": "Output",
          "x": 0.98,
          "y": 0.5,
          "uniqueID": "96dc39bc-f865-489e-8b78-aef79f7a67de",
          "ioValues": []
        },
        {
          "atomType": "Code",
          "name": "Code",
          "x": 0.5328151986183074,
          "y": 0.48757763975155277,
          "uniqueID": "09a45729-663b-47aa-b99a-d9fe131dff9c",
          "ioValues": [
            {
              "name": "height",
              "ioValue": 50
            },
            {
              "name": "width",
              "ioValue": 250
            },
            {
              "name": "rad",
              "ioValue": 50
            },
            {
              "name": "length",
              "ioValue": 100
            }
          ],
          "codeVersion": 1,
          "code": "\n      const Inputs = [\n      {inputName: \"width\", type: \"number\", defaultValue: 5},\n        {inputName: \"length\", type: \"number\", defaultValue: 10},\n        {inputName: \"rad\", type: \"number\", defaultValue: 2},\n         {inputName: \"height\", type: \"number\", defaultValue: 1}\n        \n      ]\n\n      const newPlane = new replicad.Plane().pivot(0, 'Y')\n      //Create a new shape from scratch using replicad\nconsole.log(replicad)\n      let createdRoundedRectangle = replicad.sketchRoundedRectangle(width, length, rad, newPlane).extrude(height)\n    console.log(createdRoundedRectangle)\n\n      //Wrap the raw replicad geometry in our assembly format\n      let shape2 = {\n          geometry: [createdRoundedRectangle],\n          dimension: \"3D\",\n          tags: [\"createdShape\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n\n     \n\n      return shape2\n\n      /**\n      Built-in Functions Available:\n      - Move(geometry, x, y, z) - Move a shape in 3D space\n      - Rotate(geometry, x, y, z) - Rotate a shape around X, Y, Z axes (degrees)\n      - Scale(geometry, factor) - Scale a shape by a factor\n      - Assembly([shapes]) - Combine multiple shapes into an assembly\n      - Intersect(shape1, shape2) - Boolean intersection of two shapes\n      - GetBounds(geometry) - Get the bounding box of a shape\n      - Fillet(geometry, radius) - Round edges with specified radius\n      - Chamfer(geometry, size) - Bevel edges with specified size\n\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      const Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n\n      Access imported geometry using library[inputName] - the built-in functions handle \n      the complexity of accessing geometry arrays and maintaining metadata automatically.\n\n      Simple Example - Move a shape:\n         const Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let movedShape = await Move(library[shape], x, 0, 0)\n        return movedShape\n      */\n      "
        },
        {
          "atomType": "Input",
          "name": "width",
          "x": 0.033,
          "y": 0.3322981366459627,
          "uniqueID": "9e5d77b6-645a-4528-8383-b33b5615575f",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "length",
          "x": 0.033,
          "y": 0.5,
          "uniqueID": "7f12caec-c1bc-4f5c-9a0f-26cfa46cf2e3",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "radius",
          "x": 0.033,
          "y": 0.6863354037267081,
          "uniqueID": "12d9f144-e11b-44fd-b438-9c7d8f76ce00",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "height",
          "x": 0.033,
          "y": 0.8260869565217391,
          "uniqueID": "a6e7ac4c-ad61-4d19-be25-bb75e7687b67",
          "ioValues": [],
          "type": "number"
        }
      ],
      "allConnectors": [
        {
          "ap1Name": "output",
          "ap2Name": "number or geometry",
          "ap1ID": "09a45729-663b-47aa-b99a-d9fe131dff9c",
          "ap2ID": "96dc39bc-f865-489e-8b78-aef79f7a67de"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "width",
          "ap1ID": "9e5d77b6-645a-4528-8383-b33b5615575f",
          "ap2ID": "09a45729-663b-47aa-b99a-d9fe131dff9c"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "length",
          "ap1ID": "7f12caec-c1bc-4f5c-9a0f-26cfa46cf2e3",
          "ap2ID": "09a45729-663b-47aa-b99a-d9fe131dff9c"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "rad",
          "ap1ID": "12d9f144-e11b-44fd-b438-9c7d8f76ce00",
          "ap2ID": "09a45729-663b-47aa-b99a-d9fe131dff9c"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "height",
          "ap1ID": "a6e7ac4c-ad61-4d19-be25-bb75e7687b67",
          "ap2ID": "09a45729-663b-47aa-b99a-d9fe131dff9c"
        }
      ],
      "parentRepo": {
        "privateRepo": false,
        "repoName": "Rounded-rectangle-rep",
        "dateCreated": "2025-10-07T14:21:34Z",
        "readMe": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/README.md?sanitize=true",
        "yyyy": 2025,
        "topMoleculeID": "cda49ba0-13f8-4029-b2b8-230ed42791e4",
        "githubMoleculesUsed": [],
        "html_url": "https://github.com/alzatin/Rounded-rectangle-rep",
        "topics": [
          "abundance-tool",
          "3d"
        ],
        "parentRepo": null,
        "forks": 0,
        "dateModified": "739531",
        "ranking": 0,
        "searchField": "rounded-rectangle-rep alzatin 3d extruded- rounded rectangle using replicad's sketchroundedrectangle method. less likely to fail when using larger radius.  abundance-tool 3d",
        "owner": "alzatin",
        "description": "3D Extruded- Rounded rectangle using replicad's sketchRoundedRectangle method. Less likely to fail when using larger radius. ",
        "contentURL": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/project.abundance?sanitize=true",
        "svgURL": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/project.svg?sanitize=true",
        "isLocal": false
      },
      "unitsKey": "MM",
      "fileTypeVersion": 1,
      "compiledBom": []
    },
    {
      "atomType": "GitHubMolecule",
      "name": "Rounded-rectangle-rep",
      "x": 0.12262521588946461,
      "y": 0.40993788819875776,
      "uniqueID": "60b68fcb-e6b6-430f-83a9-9cdcbffbd5e6",
      "ioValues": [
        {
          "name": "width",
          "ioValue": 200
        },
        {
          "name": "length",
          "ioValue": 100
        },
        {
          "name": "radius",
          "ioValue": 50
        },
        {
          "name": "height",
          "ioValue": 150,
          "currentEquation": "150"
        }
      ],
      "topLevel": false,
      "allAtoms": [
        {
          "atomType": "Output",
          "name": "Output",
          "x": 0.98,
          "y": 0.5,
          "uniqueID": "b0263b92-2329-43f1-ac12-a97addfde333",
          "ioValues": []
        },
        {
          "atomType": "Code",
          "name": "Code",
          "x": 0.5328151986183074,
          "y": 0.48757763975155277,
          "uniqueID": "5210b663-9259-4628-b509-975aa4944b89",
          "ioValues": [
            {
              "name": "height",
              "ioValue": 150
            },
            {
              "name": "width",
              "ioValue": 200
            },
            {
              "name": "rad",
              "ioValue": 50
            },
            {
              "name": "length",
              "ioValue": 100
            }
          ],
          "codeVersion": 1,
          "code": "\n      const Inputs = [\n      {inputName: \"width\", type: \"number\", defaultValue: 5},\n        {inputName: \"length\", type: \"number\", defaultValue: 10},\n        {inputName: \"rad\", type: \"number\", defaultValue: 2},\n         {inputName: \"height\", type: \"number\", defaultValue: 1}\n        \n      ]\n\n      const newPlane = new replicad.Plane().pivot(0, 'Y')\n      //Create a new shape from scratch using replicad\nconsole.log(replicad)\n      let createdRoundedRectangle = replicad.sketchRoundedRectangle(width, length, rad, newPlane).extrude(height)\n    console.log(createdRoundedRectangle)\n\n      //Wrap the raw replicad geometry in our assembly format\n      let shape2 = {\n          geometry: [createdRoundedRectangle],\n          dimension: \"3D\",\n          tags: [\"createdShape\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n\n     \n\n      return shape2\n\n      /**\n      Built-in Functions Available:\n      - Move(geometry, x, y, z) - Move a shape in 3D space\n      - Rotate(geometry, x, y, z) - Rotate a shape around X, Y, Z axes (degrees)\n      - Scale(geometry, factor) - Scale a shape by a factor\n      - Assembly([shapes]) - Combine multiple shapes into an assembly\n      - Intersect(shape1, shape2) - Boolean intersection of two shapes\n      - GetBounds(geometry) - Get the bounding box of a shape\n      - Fillet(geometry, radius) - Round edges with specified radius\n      - Chamfer(geometry, size) - Bevel edges with specified size\n\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      const Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n\n      Access imported geometry using library[inputName] - the built-in functions handle \n      the complexity of accessing geometry arrays and maintaining metadata automatically.\n\n      Simple Example - Move a shape:\n         const Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let movedShape = await Move(library[shape], x, 0, 0)\n        return movedShape\n      */\n      "
        },
        {
          "atomType": "Input",
          "name": "width",
          "x": 0.033,
          "y": 0.3322981366459627,
          "uniqueID": "8668516a-c01f-413a-87f9-a30380b08f36",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "length",
          "x": 0.033,
          "y": 0.5,
          "uniqueID": "f7cd40a3-5704-4c36-8331-c6c7d421be2a",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "radius",
          "x": 0.033,
          "y": 0.6863354037267081,
          "uniqueID": "d66f66ad-1b57-43a2-862c-38848f203adb",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "height",
          "x": 0.033,
          "y": 0.8260869565217391,
          "uniqueID": "83cd9cf1-81bb-4bf6-bd0e-439754dab997",
          "ioValues": [],
          "type": "number"
        }
      ],
      "allConnectors": [
        {
          "ap1Name": "output",
          "ap2Name": "number or geometry",
          "ap1ID": "5210b663-9259-4628-b509-975aa4944b89",
          "ap2ID": "b0263b92-2329-43f1-ac12-a97addfde333"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "width",
          "ap1ID": "8668516a-c01f-413a-87f9-a30380b08f36",
          "ap2ID": "5210b663-9259-4628-b509-975aa4944b89"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "length",
          "ap1ID": "f7cd40a3-5704-4c36-8331-c6c7d421be2a",
          "ap2ID": "5210b663-9259-4628-b509-975aa4944b89"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "rad",
          "ap1ID": "d66f66ad-1b57-43a2-862c-38848f203adb",
          "ap2ID": "5210b663-9259-4628-b509-975aa4944b89"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "height",
          "ap1ID": "83cd9cf1-81bb-4bf6-bd0e-439754dab997",
          "ap2ID": "5210b663-9259-4628-b509-975aa4944b89"
        }
      ],
      "parentRepo": {
        "privateRepo": false,
        "repoName": "Rounded-rectangle-rep",
        "dateCreated": "2025-10-07T14:21:34Z",
        "readMe": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/README.md?sanitize=true",
        "yyyy": 2025,
        "topMoleculeID": "cda49ba0-13f8-4029-b2b8-230ed42791e4",
        "githubMoleculesUsed": [],
        "html_url": "https://github.com/alzatin/Rounded-rectangle-rep",
        "topics": [
          "abundance-tool",
          "3d"
        ],
        "parentRepo": null,
        "forks": 0,
        "dateModified": "739531",
        "ranking": 0,
        "searchField": "rounded-rectangle-rep alzatin 3d extruded- rounded rectangle using replicad's sketchroundedrectangle method. less likely to fail when using larger radius.  abundance-tool 3d",
        "owner": "alzatin",
        "description": "3D Extruded- Rounded rectangle using replicad's sketchRoundedRectangle method. Less likely to fail when using larger radius. ",
        "contentURL": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/project.abundance?sanitize=true",
        "svgURL": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/project.svg?sanitize=true",
        "isLocal": false
      },
      "unitsKey": "MM",
      "fileTypeVersion": 1,
      "compiledBom": []
    },
    {
      "atomType": "GitHubMolecule",
      "name": "Rounded-rectangle-rep",
      "x": 0.23488773747841102,
      "y": 0.782608695652174,
      "uniqueID": "d4f7df0e-ec4c-401a-84b6-393fbc2a7fe1",
      "ioValues": [
        {
          "name": "width",
          "ioValue": 250
        },
        {
          "name": "length",
          "ioValue": 100
        },
        {
          "name": "radius",
          "ioValue": 50
        },
        {
          "name": "height",
          "ioValue": 50
        }
      ],
      "topLevel": false,
      "allAtoms": [
        {
          "atomType": "Output",
          "name": "Output",
          "x": 0.98,
          "y": 0.5,
          "uniqueID": "d000598f-fa74-4041-9b98-73cfccc4c59f",
          "ioValues": []
        },
        {
          "atomType": "Code",
          "name": "Code",
          "x": 0.5328151986183074,
          "y": 0.48757763975155277,
          "uniqueID": "61f55011-eec1-45aa-806b-05e931dbd795",
          "ioValues": [
            {
              "name": "height",
              "ioValue": 50
            },
            {
              "name": "width",
              "ioValue": 250
            },
            {
              "name": "rad",
              "ioValue": 50
            },
            {
              "name": "length",
              "ioValue": 100
            }
          ],
          "codeVersion": 1,
          "code": "\n      const Inputs = [\n      {inputName: \"width\", type: \"number\", defaultValue: 5},\n        {inputName: \"length\", type: \"number\", defaultValue: 10},\n        {inputName: \"rad\", type: \"number\", defaultValue: 2},\n         {inputName: \"height\", type: \"number\", defaultValue: 1}\n        \n      ]\n\n      const newPlane = new replicad.Plane().pivot(0, 'Y')\n      //Create a new shape from scratch using replicad\nconsole.log(replicad)\n      let createdRoundedRectangle = replicad.sketchRoundedRectangle(width, length, rad, newPlane).extrude(height)\n    console.log(createdRoundedRectangle)\n\n      //Wrap the raw replicad geometry in our assembly format\n      let shape2 = {\n          geometry: [createdRoundedRectangle],\n          dimension: \"3D\",\n          tags: [\"createdShape\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n\n     \n\n      return shape2\n\n      /**\n      Built-in Functions Available:\n      - Move(geometry, x, y, z) - Move a shape in 3D space\n      - Rotate(geometry, x, y, z) - Rotate a shape around X, Y, Z axes (degrees)\n      - Scale(geometry, factor) - Scale a shape by a factor\n      - Assembly([shapes]) - Combine multiple shapes into an assembly\n      - Intersect(shape1, shape2) - Boolean intersection of two shapes\n      - GetBounds(geometry) - Get the bounding box of a shape\n      - Fillet(geometry, radius) - Round edges with specified radius\n      - Chamfer(geometry, size) - Bevel edges with specified size\n\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      const Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n\n      Access imported geometry using library[inputName] - the built-in functions handle \n      the complexity of accessing geometry arrays and maintaining metadata automatically.\n\n      Simple Example - Move a shape:\n         const Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let movedShape = await Move(library[shape], x, 0, 0)\n        return movedShape\n      */\n      "
        },
        {
          "atomType": "Input",
          "name": "width",
          "x": 0.033,
          "y": 0.3322981366459627,
          "uniqueID": "39fc0ed3-30f4-4912-babb-0b5527ef7a4c",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "length",
          "x": 0.033,
          "y": 0.5,
          "uniqueID": "5e8a11a2-9f27-4053-8ff7-8f12a71ac0a7",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "radius",
          "x": 0.033,
          "y": 0.6863354037267081,
          "uniqueID": "221c7d9e-7a8a-4b13-aec4-2fd4b901b8d5",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "height",
          "x": 0.033,
          "y": 0.8260869565217391,
          "uniqueID": "3979c3bb-16be-4ec3-a51f-129d2aec06d3",
          "ioValues": [],
          "type": "number"
        }
      ],
      "allConnectors": [
        {
          "ap1Name": "output",
          "ap2Name": "number or geometry",
          "ap1ID": "61f55011-eec1-45aa-806b-05e931dbd795",
          "ap2ID": "d000598f-fa74-4041-9b98-73cfccc4c59f"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "width",
          "ap1ID": "39fc0ed3-30f4-4912-babb-0b5527ef7a4c",
          "ap2ID": "61f55011-eec1-45aa-806b-05e931dbd795"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "length",
          "ap1ID": "5e8a11a2-9f27-4053-8ff7-8f12a71ac0a7",
          "ap2ID": "61f55011-eec1-45aa-806b-05e931dbd795"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "rad",
          "ap1ID": "221c7d9e-7a8a-4b13-aec4-2fd4b901b8d5",
          "ap2ID": "61f55011-eec1-45aa-806b-05e931dbd795"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "height",
          "ap1ID": "3979c3bb-16be-4ec3-a51f-129d2aec06d3",
          "ap2ID": "61f55011-eec1-45aa-806b-05e931dbd795"
        }
      ],
      "parentRepo": {
        "privateRepo": false,
        "repoName": "Rounded-rectangle-rep",
        "dateCreated": "2025-10-07T14:21:34Z",
        "readMe": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/README.md?sanitize=true",
        "yyyy": 2025,
        "topMoleculeID": "cda49ba0-13f8-4029-b2b8-230ed42791e4",
        "githubMoleculesUsed": [],
        "html_url": "https://github.com/alzatin/Rounded-rectangle-rep",
        "topics": [
          "abundance-tool",
          "3d"
        ],
        "parentRepo": null,
        "forks": 0,
        "dateModified": "739531",
        "ranking": 0,
        "searchField": "rounded-rectangle-rep alzatin 3d extruded- rounded rectangle using replicad's sketchroundedrectangle method. less likely to fail when using larger radius.  abundance-tool 3d",
        "owner": "alzatin",
        "description": "3D Extruded- Rounded rectangle using replicad's sketchRoundedRectangle method. Less likely to fail when using larger radius. ",
        "contentURL": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/project.abundance?sanitize=true",
        "svgURL": "https://raw.githubusercontent.com/alzatin/Rounded-rectangle-rep/master/project.svg?sanitize=true",
        "isLocal": false
      },
      "unitsKey": "MM",
      "fileTypeVersion": 1,
      "compiledBom": []
    }
  ],
  "allConnectors": [
    {
      "ap1Name": "geometry",
      "ap2Name": "geometry",
      "ap1ID": "35118ee3-e00e-45c2-b82d-9fdc6d5fa4b7",
      "ap2ID": "4aa7c59a-ba3e-48d8-b42d-c14f75a88895"
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "geometry2",
      "ap1ID": "4aa7c59a-ba3e-48d8-b42d-c14f75a88895",
      "ap2ID": "cf7467a2-a71f-4206-a34f-05588794493d"
    },
    {
      "ap1Name": "geometry or number",
      "ap2Name": "geometry1",
      "ap1ID": "7bd41214-231b-4121-81e8-ec318b6815e2",
      "ap2ID": "cf7467a2-a71f-4206-a34f-05588794493d"
    },
    {
      "ap1Name": "geometry or number",
      "ap2Name": "geometry",
      "ap1ID": "60b68fcb-e6b6-430f-83a9-9cdcbffbd5e6",
      "ap2ID": "35118ee3-e00e-45c2-b82d-9fdc6d5fa4b7"
    }
  ],
  "unitsKey": "MM",
  "fileTypeVersion": 1,
  "compiledBom": {},
  "filetypeVersion": 1
}